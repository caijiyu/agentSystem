 package com.jeeplus.modules.agentsystem.terminal.web;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
/**
 * 
 * @author Hua
 *
 */
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.ListUtils;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.common.collect.Lists;
import com.jeeplus.common.persistence.Page;
import com.jeeplus.common.utils.StringUtils;
import com.jeeplus.common.web.BaseController;
import com.jeeplus.modules.agentsystem.agency.entity.WasPolicyPurchase;
import com.jeeplus.modules.agentsystem.agency.entity.WasSysUser;
import com.jeeplus.modules.agentsystem.agency.service.WasSysUserService;
import com.jeeplus.modules.agentsystem.sysdata.entity.WasAgentLevel;
import com.jeeplus.modules.agentsystem.sysdata.entity.WasSalesPolicy;
import com.jeeplus.modules.agentsystem.sysdata.entity.WasSoftware;
import com.jeeplus.modules.agentsystem.sysdata.entity.WasSoftwareModifyPrice;
import com.jeeplus.modules.agentsystem.sysdata.service.WasAgentLevelService;
import com.jeeplus.modules.agentsystem.sysdata.service.WasSalesPolicyService;
import com.jeeplus.modules.agentsystem.sysdata.service.WasSoftwareModifyPriceService;
import com.jeeplus.modules.agentsystem.sysdata.service.WasSoftwareService;
import com.jeeplus.modules.agentsystem.sysdata.service.WasUserService;
import com.jeeplus.modules.agentsystem.terminal.entity.WasTerminalProduct;
import com.jeeplus.modules.agentsystem.terminal.entity.WasTerminalUser;
import com.jeeplus.modules.agentsystem.terminal.service.WasTerminalProductService;
import com.jeeplus.modules.agentsystem.terminal.service.WasTerminalUserService;
import com.jeeplus.modules.agentsystem.utils.MoneyOperation;
import com.jeeplus.modules.sys.entity.User;
import com.jeeplus.modules.sys.security.SystemAuthorizingRealm.Principal;
import com.jeeplus.modules.sys.utils.UserUtils;

import scala.util.parsing.combinator.testing.Str;

@Controller
@RequestMapping(value="${adminPath}/agentSystem/terminal/wasTerminalProduct")
@Transactional(readOnly = false,rollbackFor=Exception.class)
public class WasTerminalProductController  extends BaseController{
	@Autowired
	private WasTerminalProductService wasTerminalProductService;
	@Autowired
	private WasTerminalUserService wasTerminalUserService;
	@Autowired
	private WasSysUserService wasSysUserService;
	@Autowired
	private WasSoftwareService wasSoftwareService;
	@Autowired
	private WasSoftwareModifyPriceService wasSoftwareModifyPriceService;
	@Autowired
	private WasAgentLevelService wasAgentLevelService;
	@Autowired
	private WasSalesPolicyService wasSalesPolicyService;
	@Autowired
	private WasUserService wasUserService;
	
	public static final String  AGENT="代理商";		
	/**
	 * 变更产品支付
	 * @param terminalUserId
	 * @param oldSoftWareId
	 * @param newSoftWareId
	 * @param money
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="changeProduct")
	public String changeProduct(Integer terminalUserId,Integer oldSoftWareId,Integer newSoftWareId,BigDecimal money) {
		System.err.println("流星");
		System.err.println("terminalUserId:="+terminalUserId);
		System.err.println("oldSoftWareId:="+oldSoftWareId);
		System.err.println("newSoftWareId:="+newSoftWareId);
		System.err.println("money:="+money);
		WasTerminalProduct wasTerminalProduct = wasTerminalProductService.findByTerminalUserIdAndSoftWareId(terminalUserId, oldSoftWareId);
		wasTerminalProduct.setSoftwareId(newSoftWareId);
		//更新终端表
		wasTerminalProductService.updateProduct(wasTerminalProduct);
		WasSoftware wasSoftware = wasSoftwareService.findSoftwareById(oldSoftWareId);
		Boolean classify = wasSoftware.getClassify();
		String userId = UserUtils.getUser().getId();
		//取账号信息
		WasTerminalUser wasTerminalUser = wasTerminalUserService.findByTerminalUserId(terminalUserId);
		String parentId = wasTerminalUser.getParentId();
    	WasSysUser sysUser = wasSysUserService.get(parentId);
		BigDecimal pubA = sysUser.getPublicAccount();
		BigDecimal minaA = sysUser.getMinaAccount();
		BigDecimal publicExpend =new BigDecimal("0.00");				
		BigDecimal minaExpend = new BigDecimal("0.00");						
		BigDecimal vipExpend = new BigDecimal("0.00");	
		String accountResult = null;
		if (classify) {
			//小程序
			Integer temp = money.compareTo(minaA);
			if(temp==-1||temp==0){
				minaExpend = money;
				accountResult = MoneyOperation.getInstance().moneyOperation(null,null, minaExpend, null, null, parentId, null);
			}else{
				//1,各个账户支出
				minaExpend = minaA;
				vipExpend = money.subtract(minaA);
				accountResult = MoneyOperation.getInstance().moneyOperation(null,null, minaExpend, null, vipExpend, parentId, null);
			}
		}else{
			//公众号
			Integer temp = money.compareTo(minaA);
			if(temp==-1||temp==0){
				publicExpend = money;
				accountResult = MoneyOperation.getInstance().moneyOperation(null,publicExpend, null, null, null, userId, null);
			}else{
				//1,各个账户支出
				publicExpend = pubA;
				vipExpend = money.subtract(pubA);
				accountResult = MoneyOperation.getInstance().moneyOperation(null,publicExpend, null, null, vipExpend, parentId, null);
			}
		}
		System.err.println(accountResult);
		return accountResult=="操作成功"?"success":"error";
	}
	/**
	 *  查找所有软件
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="findAllSofts")
	public List<WasSoftware> findAllSofts(Integer terminalUserId) {
		WasTerminalUser wasTerminalUser = wasTerminalUserService.findByTerminalUserId(terminalUserId);
		String id = wasTerminalUser.getParentId();
		WasSysUser wasSysUser = wasSysUserService.get(id);
		Integer agentLevelId = wasSysUser.getAgentLevelId();
		System.err.println(agentLevelId);
		WasAgentLevel wasAgentLevel = wasAgentLevelService.getEnity(agentLevelId);
		String salesPolecyIds =  wasAgentLevel.getSalesPolicyIds();
		
		List<WasSoftware> softwares = Lists.newArrayList();
		StringBuilder softWareIds = new StringBuilder(""); 
		
		if(StringUtils.isNotBlank(salesPolecyIds)){			
			String[] ids = StringUtils.split(salesPolecyIds, ",");		
			List<String> softIdList = Lists.newArrayList();
			System.err.println("代理商拥有的方针");
			for(String salesPolecyid : ids){
				WasSalesPolicy wasSalesPolicy = wasSalesPolicyService.findById(Integer.valueOf(salesPolecyid));
				System.err.println(salesPolecyid);
				String softIds = wasSalesPolicy.getSoftwareIds();
				softWareIds.append(softIds + ",");
			}
			System.err.println("软件个数");
			System.err.println(softWareIds);
		}
		String temp= softWareIds.substring(0, softWareIds.length()-1);
		String[] ids = StringUtils.split(temp, ",");		
		List<String> templist = Arrays.asList(ids);
		Set<String> set = new HashSet<String>(templist);
		String[] sids=(String[])set.toArray(new String[0]);
		
		System.err.println("当前终端所属代理商代理的软件");
		for(String sid : sids){
			System.err.println(wasSoftwareService.findSoftwareById(Integer.valueOf(sid)));
			softwares.add(wasSoftwareService.findSoftwareById(Integer.valueOf(sid)));
		}
		return 	softwares;
		
	}

	/**
	 * 查找更换更换产品需求话费的money
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="findChangeMoney")
	public List<WasSoftwareModifyPrice> findChangeMoney() {
		return 	wasSoftwareModifyPriceService.findChangeMoney();
	}
	/**
	 * 当前终端拥有的产品
	 * @param terminalUserId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="showProducts")
	public List<WasTerminalProduct> findProductsByTerminalUserId(Integer terminalUserId) {
		 List<WasTerminalProduct> list = wasTerminalProductService.findProductsByTerminalUserId(terminalUserId);
		for(WasTerminalProduct wasTerminalProduct : list){
			Integer softId = wasTerminalProduct.getSoftwareId();
			WasSoftware wasSoftware = wasSoftwareService.findSoftwareById(softId);
			Boolean isFlag = wasSoftware.getClassify();
			if(isFlag){
				wasTerminalProduct.setIsNewRecord(true);
			}else{
				wasTerminalProduct.setIsNewRecord(false);
			}
			wasTerminalProduct.setId(wasSoftware.getName());
		}
		return list;
	}
	/**
	 * 终端产品列表管理页面
	 * @param wasTerminalUser
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequiresPermissions("terminal:wasTerminalProduct:productList")
	@RequestMapping(value = {"productList", ""})
	public String productList(WasTerminalUser wasTerminalUser, HttpServletRequest request, HttpServletResponse response, Model model) {
		//管理员,财务，parentId置空
		//总代，找二级代和自己
		//一级二级不做处理
		//时间限制在前端
		Subject subject = SecurityUtils.getSubject();
		Principal principal = (Principal)subject.getPrincipal(); 
		WasSysUser wasSysUser=wasUserService.get(principal.getId());
		 Page<WasTerminalUser> page = null;
		if(AGENT.equals(wasSysUser.getRoleList().get(0).getRoleType())){User user = UserUtils.getUser();
			List<String> subUserIds= wasTerminalUserService.findSubUsers(user.getId());
			subUserIds.add(user.getId());
			wasTerminalUser.setSubUserIds(subUserIds);
		}else{
			wasTerminalUser.setSubUserIds(null);
		}
		page = wasTerminalUserService.findPage(new Page<WasTerminalUser>(request, response), wasTerminalUser); 
        for(WasTerminalUser terminalUser : page.getList()){
        	WasSysUser wSysUser = wasSysUserService.get(terminalUser.getParentId());
        	String companyName = wSysUser.getCompanyName();
        	terminalUser.setParentId(companyName);
        	//判断所属代理商是否冻结
        	if(1==wSysUser.getState()){
        		terminalUser.setAgentState(true);
        		System.err.println("1111" + terminalUser.getAgentState());
        	}else {
        		terminalUser.setAgentState(false);
        		System.err.println("2222"+ terminalUser.getAgentState());
			}
        	//判断所属代理商是否过期
        	if(wSysUser.getEndDate()!=null){
	        	if(wSysUser.getEndDate().getTime() >= new Date().getTime()){
	        		terminalUser.setAgentValid(true);
	        	}else{
	        		terminalUser.setAgentValid(false);
	        	}
        	}
        	if(wasSysUser.getId().equals("1")){
        		terminalUser.setAgentState(true);
        		terminalUser.setAgentValid(true);
        	}
        	
        }
        model.addAttribute("page", page);
		return "modules/agentsystem/terminal/wasTerminalProductList";
	}
}
