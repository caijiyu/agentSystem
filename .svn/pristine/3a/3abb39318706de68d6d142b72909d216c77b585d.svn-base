package com.jeeplus.modules.agentsystem.sysdata.web;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.jeeplus.common.utils.StringUtils;
import com.jeeplus.modules.agentsystem.sysdata.service.WasMenuService;
import com.jeeplus.modules.sys.entity.Menu;
import com.jeeplus.modules.sys.service.SystemService;

/**
 * 菜单管理Controller
 * @author Ricky
 * @version 2017-09-27
 */
@Controller
@RequestMapping(value = "${adminPath}/sysdata/menu")
public class WasMenuController {
	@Autowired
	private SystemService systemService;
	@Autowired
	private WasMenuService wasMenuService;
	
	@ModelAttribute("menu")
	public Menu get(@RequestParam(required=false) String id) {
		if (StringUtils.isNotBlank(id)){
			return systemService.getMenu(id);
		}else{
			return new Menu();
		}
	}
	
	@ResponseBody
	@RequestMapping(value = "get")
	public Menu getMenu(Menu menu) {
		String id = menu.getId();
		menu = systemService.getMenu(id);
		menu.setParentName(menu.getParent().getName());
		return menu;
	}
	
	/*@RequiresPermissions("sys:menu:list")*/
	@RequestMapping(value = {"list", ""})
	public String list(Menu menu, Model model) {
		/*List<Menu> list = Lists.newArrayList();
		List<Menu> sourcelist = systemService.findAllMenu();
		Menu.sortList(list, sourcelist, Menu.getRootId(), true);

        if (menu.getParent()==null||menu.getParent().getId()==null){
			menu.setParent(new Menu(Menu.getRootId()));
		}
		menu.setParent(systemService.getMenu(menu.getParent().getId()));
		// 获取排序号，最末节点排序号+30
		if (StringUtils.isBlank(menu.getId())){
			Menu.sortList(list, sourcelist, menu.getParentId(), false);
			if (list.size() > 0){
				menu.setSort(list.get(list.size()-1).getSort() + 30);
			}
			model.addAttribute("list", list);
		}
		model.addAttribute("list", list);
		return "modules/agentSystem/sysdata/wasMenuList";*/
		
		List<Menu> list = Lists.newArrayList();
		List<Menu> sourcelist = systemService.findAllMenu();
		Menu.sortList(list, sourcelist, Menu.getRootId(), true);
        model.addAttribute("list", list);
        return "modules/agentsystem/sysdata/wasMenuList";
	}
	
	
	@ResponseBody
	@RequestMapping(value = "save")
	public int save(Menu menu) {
		
		int result = 0;
		systemService.saveMenu(menu);
		result = 1;
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value = "delete")
	public int deleteMenu(Menu menu) {
		int result = 0;
		
		List<Menu> list = wasMenuService.selectChild(menu.getId());
		for(Menu aMenu:list){
			wasMenuService.deleteMenu(aMenu);
		}
		systemService.deleteMenu(menu);
		result = 1;
		return result;
	}
	
	/**
	 * isShowHide是否显示隐藏菜单
	 * @param extId
	 * @param isShowHidden
	 * @param response
	 * @return
	 */
	@RequiresPermissions("user")
	@ResponseBody
	@RequestMapping(value = "treeData")
	public List<Map<String, Object>> treeData(@RequestParam(required=false) String extId,@RequestParam(required=false) String isShowHide, HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<Menu> list = systemService.findAllMenu();
		for (int i=0; i<list.size(); i++){
			Menu e = list.get(i);
			if (StringUtils.isBlank(extId) || (extId!=null && !extId.equals(e.getId()) && e.getParentIds().indexOf(","+extId+",")==-1)){
				if(isShowHide != null && isShowHide.equals("0") && e.getIsShow().equals("0")){
					continue;
				}
				Map<String, Object> map = Maps.newHashMap();
				map.put("id", e.getId());
				map.put("pId", e.getParentId());
				map.put("name", e.getName());
				mapList.add(map);
			}
		}
		return mapList;
	}
	
	@RequiresPermissions("user")
	@RequestMapping(value = "tree")
	public String tree() {
		return "modules/sys/menuTree";
	}

	@RequiresPermissions("user")
	@RequestMapping(value = "treeselect")
	public String treeselect(String parentId, Model model) {
		model.addAttribute("parentId", parentId);
		return "modules/sys/menuTreeselect";
	}
}
