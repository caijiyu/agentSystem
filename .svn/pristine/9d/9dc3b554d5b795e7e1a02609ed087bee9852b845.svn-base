package com.jeeplus.modules.agentsystem.terminal.web;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jeeplus.common.persistence.Page;
import com.jeeplus.common.web.BaseController;
import com.jeeplus.modules.agentsystem.terminal.entity.WasTerminalUser;
import com.jeeplus.modules.agentsystem.terminal.service.WasTerminalUserService;
/**
 * 
 * @author Hua
 *
 */
@Controller
@RequestMapping(value="${adminPath}/agentSystem/terminal/wasTerminalUser")
public class WasTerminalUserController extends BaseController{

	@Autowired
	private WasTerminalUserService wasTerminalUserService;

	//@RequiresPermissions("terminal:wasTerminalUser:list")
	@RequestMapping(value = {"list", ""})
	public String list(WasTerminalUser wasTerminalUser, HttpServletRequest request, HttpServletResponse response, Model model) {
		//管理员,财务，parentId置空
		//总代，找二级代和自己
		//一级二级不做处理
		//时间限制在前端
        Page<WasTerminalUser> page = wasTerminalUserService.findPage(new Page<WasTerminalUser>(request, response), wasTerminalUser); 
        model.addAttribute("page", page);
		return "modules/agentsystem/terminal/wasTerminalUserList";
	}

	//@RequiresPermissions(value={"terminal:wasTerminalUser:add","terminal:wasTerminalUser:edit"},logical=Logical.OR)
	@RequestMapping(value = "form")
	public String form(Integer terminalUserId,Model model) {
		if(terminalUserId!=null){
			model.addAttribute("wasTerminalUser", wasTerminalUserService.findByTerminalUserId(terminalUserId));
		}
		return "modules/agentsystem/terminal/wasTerminalUserForm";
	}
	//保存
	//@RequiresPermissions("terminal:wasTerminalUser:save")
	@RequestMapping(value = "save")
	@ResponseBody
	public String save(WasTerminalUser wasTerminalUser) {
		Integer num = -1;
		num = wasTerminalUserService.saveWasTerminalUser(wasTerminalUser);
		return num>0?"success":"failure";
	}
	//逻辑删除
	//@RequiresPermissions("terminal:wasTerminalUser:delete")
	@RequestMapping(value = "delete")
	@ResponseBody
	public String delete(Integer terminalUserId) {
		int num = -1;
		num =  wasTerminalUserService.deleteLogic(terminalUserId);
		return num>0?"success":"failure";
	}
	//冻结
	//@RequiresPermissions("terminal:wasTerminalUser:freeze")
	@RequestMapping(value = "freeze")
	@ResponseBody
	public String freeze(Integer terminalUserId,String reason) {
		int num = -1;
		num = wasTerminalUserService.freeze(reason, terminalUserId);
		return num>0?"success":"failure";
	}
	//解冻
	//@RequiresPermissions("terminal:wasTerminalUser:thaw")
	@RequestMapping(value = "thaw")
	@ResponseBody
	public String thaw(Integer terminalUserId,String reason) {
		int num = -1;
		num = wasTerminalUserService.thaw(reason, terminalUserId);
		return num>0?"success":"failure";
	}	
	//公司名唯一性验证
	@RequestMapping(value = "validateCompanyName")
	@ResponseBody
	public Boolean validateCompanyName(String companyName) {
		return wasTerminalUserService.validateCompanyName(companyName);
	}
	//账号唯一性验证
	@RequestMapping(value = "validateLoginName")
	@ResponseBody
	public Boolean validateLoginName(String loginName) {
		return wasTerminalUserService.validateLoginName(loginName);
	}
	@RequestMapping(value = "validate")
	@ResponseBody
	public Boolean validate() {
		return true;
	}

}
