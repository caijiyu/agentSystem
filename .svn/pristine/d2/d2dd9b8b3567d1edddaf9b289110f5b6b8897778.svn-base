 package com.jeeplus.modules.agentsystem.terminal.web;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
/**
 * 
 * @author Hua
 *
 */
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.common.collect.Lists;
import com.jeeplus.common.persistence.Page;
import com.jeeplus.common.utils.StringUtils;
import com.jeeplus.common.web.BaseController;
import com.jeeplus.modules.agentsystem.agency.entity.WasSysUser;
import com.jeeplus.modules.agentsystem.agency.service.WasSysUserService;
import com.jeeplus.modules.agentsystem.sysdata.entity.WasAgentLevel;
import com.jeeplus.modules.agentsystem.sysdata.entity.WasAgentSystemLog;
import com.jeeplus.modules.agentsystem.sysdata.entity.WasSalesPolicy;
import com.jeeplus.modules.agentsystem.sysdata.entity.WasSoftware;
import com.jeeplus.modules.agentsystem.sysdata.entity.WasSoftwareModifyPrice;
import com.jeeplus.modules.agentsystem.sysdata.service.WasAgentLevelService;
import com.jeeplus.modules.agentsystem.sysdata.service.WasAgentSystemLogService;
import com.jeeplus.modules.agentsystem.sysdata.service.WasSalesPolicyService;
import com.jeeplus.modules.agentsystem.sysdata.service.WasSoftwareModifyPriceService;
import com.jeeplus.modules.agentsystem.sysdata.service.WasSoftwareService;
import com.jeeplus.modules.agentsystem.sysdata.service.WasUserService;
import com.jeeplus.modules.agentsystem.terminal.entity.WasTerminalProduct;
import com.jeeplus.modules.agentsystem.terminal.entity.WasTerminalUser;
import com.jeeplus.modules.agentsystem.terminal.service.WasTerminalProductService;
import com.jeeplus.modules.agentsystem.terminal.service.WasTerminalUserService;
import com.jeeplus.modules.agentsystem.utils.MoneyOperation;
import com.jeeplus.modules.agentsystem.utils.StringChangeUtils;
import com.jeeplus.modules.agentsystem.utils.TerminalPermissionUtils;
import com.jeeplus.modules.sys.entity.User;
import com.jeeplus.modules.sys.security.SystemAuthorizingRealm.Principal;
import com.jeeplus.modules.sys.utils.UserUtils;
/**
 * 
 * @author Hua
 *
 */
@Controller
@RequestMapping(value="${adminPath}/agentSystem/terminal/wasTerminalProduct")
@Transactional(readOnly = false,rollbackFor=Exception.class)
public class WasTerminalProductController  extends BaseController{
	@Autowired
	private WasTerminalProductService wasTerminalProductService;
	@Autowired
	private WasTerminalUserService wasTerminalUserService;
	@Autowired
	private WasSysUserService wasSysUserService;
	@Autowired
	private WasSoftwareService wasSoftwareService;
	@Autowired
	private WasSoftwareModifyPriceService wasSoftwareModifyPriceService;
	@Autowired
	private WasAgentLevelService wasAgentLevelService;
	@Autowired
	private WasSalesPolicyService wasSalesPolicyService;
	@Autowired
	private WasUserService wasUserService;
	@Autowired
	private WasAgentSystemLogService wasAgentSystemLogService;
	
	public static final String  AGENT="代理商";		
	/**
	 * 变更产品支付
	 * @param terminalUserId
	 * @param oldSoftWareId
	 * @param newSoftWareId
	 * @param money
	 * @return
	 * @throws ParseException 
	 */
	@ResponseBody
	@RequestMapping(value="changeProduct")
	public String changeProduct(Integer terminalUserId,Integer oldSoftWareId,Integer newSoftWareId,BigDecimal money) throws ParseException {
		WasTerminalProduct wasTerminalProduct = wasTerminalProductService.findByTerminalUserIdAndSoftWareId(terminalUserId, oldSoftWareId);
		wasTerminalProduct.setSoftwareId(newSoftWareId);
		//更新终端表
		wasTerminalProductService.updateProduct(wasTerminalProduct);
		WasSoftware wasSoftware = wasSoftwareService.findSoftwareById(oldSoftWareId);
		Boolean classify = wasSoftware.getClassify();
		//取账号信息
		WasTerminalUser wasTerminalUser = wasTerminalUserService.findByTerminalUserId(terminalUserId);
		String parentId = wasTerminalUser.getParentId();
    	WasSysUser sysUser = wasSysUserService.get(parentId);
		BigDecimal pubA = sysUser.getPublicAccount();
		BigDecimal minaA = sysUser.getMinaAccount();
		BigDecimal publicExpend =new BigDecimal("0.00");				
		BigDecimal minaExpend = new BigDecimal("0.00");						
		BigDecimal vipExpend = new BigDecimal("0.00");	
		String accountResult = null;
		if (classify) {
			//小程序
			Integer temp = money.compareTo(minaA);
			if(temp==-1||temp==0){
				minaExpend = money;
				accountResult = MoneyOperation.getInstance().moneyOperation(null,null, minaExpend, null, null, parentId, null);
			}else{
				//1,各个账户支出
				minaExpend = minaA;
				vipExpend = money.subtract(minaA);
				accountResult = MoneyOperation.getInstance().moneyOperation(null,null, minaExpend, null, vipExpend, parentId, null);
			}
		}else{
			//公众号
			Integer temp = money.compareTo(pubA);
			if(temp==-1||temp==0){
				publicExpend = money;
				accountResult = MoneyOperation.getInstance().moneyOperation(null,publicExpend, null, null, null, parentId, null);
			}else{
				//1,各个账户支出
				publicExpend = pubA;
				vipExpend = money.subtract(pubA);
				accountResult = MoneyOperation.getInstance().moneyOperation(null,publicExpend, null, null, vipExpend, parentId, null);
			}
		}
		insertLog("terminal:wasTerminalProduct:change", "变更了终端产品表，原来软件ID:"+oldSoftWareId+"，新版软件ID:"+newSoftWareId+",终端用户用户名为", wasTerminalUser.getLoginName());
//		WasTerminalUser terminalUser = wasTerminalUserService.findByTerminalUserId(terminalUserId);
//		Boolean result = TerminalPermissionUtils.sendTerminalPermissions(terminalUser);
//		if(!result){
//			throw new NullPointerException();
//		}
		return accountResult=="操作成功"?"success":"error";
	}

	/**
	 * 日志
	 * @param permission
	 * @param description
	 * @param terminalUserName
	 * @return
	 */
	private Integer insertLog(String permission,String description,String terminalUserName){
		User user = UserUtils.getUser();
		String menuId = wasTerminalUserService.getMenuIdByPermission(permission);
		WasAgentSystemLog log = new WasAgentSystemLog(menuId, new Date(), user.getId(),"用户"+ user.getLoginName()+description + terminalUserName);
		return wasAgentSystemLogService.insert(log);
	}
	/**
	 *  查找  终端  所属  代理商  代理的  所有软件
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="findAllSofts")
	public List<WasSoftware> findAllSofts(Integer terminalUserId) {
		WasTerminalUser wasTerminalUser = wasTerminalUserService.findByTerminalUserId(terminalUserId);
		String id = wasTerminalUser.getParentId();
		WasSysUser wasSysUser = wasSysUserService.get(id);
		Integer agentLevelId = wasSysUser.getAgentLevelId();
		WasAgentLevel wasAgentLevel = wasAgentLevelService.getEnity(agentLevelId);
		String salesPolecyIds =  wasAgentLevel.getSalesPolicyIds();
		
		List<WasSoftware> softwares = Lists.newArrayList();
		StringBuilder softWareIds = new StringBuilder(""); 
		
		if(StringUtils.isNotBlank(salesPolecyIds)){			
			String[] ids = StringUtils.split(salesPolecyIds, ",");		
			for(String salesPolecyid : ids){
				WasSalesPolicy wasSalesPolicy = wasSalesPolicyService.findById(Integer.valueOf(salesPolecyid));
				if((new Date().getTime()) <= (wasSalesPolicy.getEndDate().getTime()) && (new Date().getTime())>= (wasSalesPolicy.getStartDate().getTime())) {
					String softIds = wasSalesPolicy.getSoftwareIds();
					softWareIds.append(softIds + ",");
				}
				
			}
		}
		String temp = null;
		if(softWareIds != null&& softWareIds.length() != 0){
			temp = softWareIds.substring(0, softWareIds.length()-1);
			String[] ids = StringUtils.split(temp, ",");		
			List<String> templist = Arrays.asList(ids);
			Set<String> set = new HashSet<String>(templist);
			String[] sids=(String[])set.toArray(new String[0]);
			for(String sid : sids){
				softwares.add(wasSoftwareService.findSoftwareById(Integer.valueOf(sid)));
			}
		}
		return 	softwares;
		
	}

	/**
	 * 查找  变更产品  需要的 变更价格
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="findChangeMoney")
	public List<WasSoftwareModifyPrice> findChangeMoney() {
		return 	wasSoftwareModifyPriceService.findChangeMoney();
	}
	/**
	 * 当前终端拥有的产品
	 * @param terminalUserId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="showProducts")
	public List<WasTerminalProduct> findProductsByTerminalUserId(Integer terminalUserId) {
		List<WasTerminalProduct> list = wasTerminalProductService.findProductsByTerminalUserId(terminalUserId);
		for(WasTerminalProduct wasTerminalProduct : list){
			Integer softId = wasTerminalProduct.getSoftwareId();
			WasSoftware wasSoftware = wasSoftwareService.findSoftwareById(softId);
			//是公众号还是小程序
			Boolean isFlag = wasSoftware.getClassify();
			if(isFlag){
				wasTerminalProduct.setIsNewRecord(true);
			}else{
				wasTerminalProduct.setIsNewRecord(false);
			}
			wasTerminalProduct.setId(wasSoftware.getName());
			wasTerminalProduct.setNewVersion(wasSoftware.getNewVersion());
		}
		
		return list;
	}
	/**
	 * 终端产品列表管理页面
	 * @param wasTerminalUser
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequiresPermissions("terminal:wasTerminalProduct:productList")
	@RequestMapping(value = {"productList", ""})
	public String productList(WasTerminalUser wasTerminalUser, HttpServletRequest request, HttpServletResponse response, Model model) {

		
		Subject subject = SecurityUtils.getSubject();
		Principal principal = (Principal)subject.getPrincipal(); 
		WasSysUser wasSysUser=wasUserService.get(principal.getId());
		 Page<WasTerminalUser> page = null;
		 //区分  是代理商   还是   内部人员
		if(AGENT.equals(wasSysUser.getRoleList().get(0).getRoleType())){
			//代理商
			User user = UserUtils.getUser();
			List<String> subUserIds= wasTerminalUserService.findSubUsers(user.getId());
			subUserIds.add(user.getId());
			wasTerminalUser.setSubUserIds(subUserIds);
		}else{
			//内部人员
			wasTerminalUser.setSubUserIds(null);
		}
		String tempName = wasTerminalUser.getCompanyName();
		wasTerminalUser.setCompanyName(StringChangeUtils.specialStr(wasTerminalUser.getCompanyName()));
		page = wasTerminalUserService.findPage(new Page<WasTerminalUser>(request, response), wasTerminalUser);
		wasTerminalUser.setCompanyName(tempName);
        for(WasTerminalUser terminalUser : page.getList()){
    		WasSysUser wasSysUser1=wasUserService.get(terminalUser.getParentId());
        	String companyName = wasSysUser1.getCompanyName();
        	terminalUser.setParentId(companyName);
        	//判断所属代理商是否冻结
        	if(1==wasSysUser1.getState()){
        		terminalUser.setAgentState(true);
        	}else {
        		terminalUser.setAgentState(false);
			}
         	//判断所属代理商是否过期
        	if(wasSysUser1.getEndDate()!=null){
	        	if(wasSysUser1.getEndDate().getTime() >= new Date().getTime()){
	        		terminalUser.setAgentValid(true);
	        	}else{
	        		terminalUser.setAgentValid(false);
	        	}
        	}
        	//如果终端所属上级为内部人员，做特殊判断
        	if(terminalUser.getParentId().equals("1")||!AGENT.equals(wasSysUser1.getRoleList().get(0).getRoleType())){
    			terminalUser.setAgentState(true);
    			terminalUser.setAgentValid(true);
    		}
      
        }
        model.addAttribute("page", page);
		return "modules/agentsystem/terminal/wasTerminalProductList";
	}
	/**
	 * 查找代理商信息，此处主要查找总代所属代理商账号信息
	 * @param terminalUserId
	 * @return
	 */
	@RequestMapping(value="agent")
	@ResponseBody
	public WasSysUser agentAccount(Integer terminalUserId) {
		WasSysUser wasSysUser = wasSysUserService.get(wasTerminalUserService.findByTerminalUserId(terminalUserId).getParentId());
		return wasSysUser;
	}
}
