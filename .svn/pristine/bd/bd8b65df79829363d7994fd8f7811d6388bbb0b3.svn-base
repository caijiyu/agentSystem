/**
 * Copyright &copy; 2015-2020 <a href="http://www.jeeplus.org/">JeePlus</a> All rights reserved.
 */
package com.jeeplus.modules.sys.web;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authz.UnauthorizedException;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.apache.shiro.session.Session;
import org.apache.shiro.subject.Subject;
import org.apache.shiro.web.util.SavedRequest;
import org.apache.shiro.web.util.WebUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Maps;
import com.jeeplus.common.config.Global;
import com.jeeplus.common.json.AjaxJson;
import com.jeeplus.common.security.shiro.session.SessionDAO;
import com.jeeplus.common.servlet.ValidateCodeServlet;
import com.jeeplus.common.utils.CacheUtils;
import com.jeeplus.common.utils.CookieUtils;
import com.jeeplus.common.utils.IdGen;
import com.jeeplus.common.utils.StringUtils;
import com.jeeplus.common.web.BaseController;
import com.jeeplus.modules.agentsystem.agency.entity.WasSysUser;
import com.jeeplus.modules.agentsystem.agency.service.WasSysUserService;
import com.jeeplus.modules.sys.dao.UserDao;
import com.jeeplus.modules.sys.entity.User;
import com.jeeplus.modules.sys.security.FormAuthenticationFilter;
import com.jeeplus.modules.sys.security.SystemAuthorizingRealm.Principal;
import com.jeeplus.modules.sys.service.SystemService;
import com.jeeplus.modules.sys.utils.UserUtils;
import com.jeeplus.modules.tools.utils.ConfigurationFileHelper;

/**
 * 登录Controller
 * @author jeeplus
 * @version 2013-5-31
 */
@Controller
public class LoginController extends BaseController{
	
	@Autowired
	private SessionDAO sessionDAO;
	@Autowired
	private UserDao userDao;
	@Autowired
	private WasSysUserService wasSysUserService;
 	/**
	 * 输入项目名进入登录页或者管理页
	 * @throws IOException 
	 */
	@RequestMapping(value = "${adminPath}/login")
	public String login(HttpServletRequest request, HttpServletResponse response, Model model,WasSysUser wasSysUser) throws IOException {

		
			Principal principal = UserUtils.getPrincipal();		
			if (logger.isDebugEnabled()){
				logger.debug("login, active session size: {}", sessionDAO.getActiveSessions(false).size());
			}
			
			// 如果已登录，再次访问主页，则退出原账号。
			boolean isGlobal = Global.TRUE.equals(Global.getConfig("notAllowRefreshIndex"));
			if (isGlobal){
				CookieUtils.setCookie(response, "LOGINED", "false");
			}
			
			// 如果已经登录，则跳转到管理首页
			if(principal != null && !principal.isMobileLogin()){
				return "redirect:" + adminPath;
			}
			
			//获取跳转到login之前的URL
			 SavedRequest savedRequest = WebUtils.getSavedRequest(request);
			// 如果是手机没有登录跳转到到login，则返回JSON字符串
			 if(savedRequest != null){
				 String queryStr = savedRequest.getQueryString();
				 boolean exitsed = (queryStr!=null) &&( queryStr.contains("__ajax") || queryStr.contains("mobileLogin"));
				if(exitsed){
					AjaxJson j = new AjaxJson();
					j.setSuccess(false);
					j.setErrorCode("0");
					j.setMsg("没有登录!");
					return renderString(response, j);
				}
			 }
		return "modules/sys/sysLoginS";
	}
	
	
	//修改密码
	@RequestMapping(value = "${adminPath}/changePassword")
	public String changePassword(HttpServletRequest request, HttpServletResponse response, Model model) throws IOException {
				
		return "modules/sys/sysChangePassword";
	}
	//返回登录的页面
	@RequestMapping(value = "${adminPath}/backLogin")
	public String backLogin(HttpServletRequest request, HttpServletResponse response){		
		return "modules/sys/sysLoginS";
	} 
	//修改密码	
	@ResponseBody
	@RequestMapping(value = "${adminPath}/affirmChange")	
	public String affirmSave(HttpServletRequest request, HttpServletResponse response,RedirectAttributes redirectAttributes){
		String loginName = request.getParameter("loginName");
		String oldPassword = request.getParameter("oldPassword");
		String password = request.getParameter("changeNewPassword");		
		User user = userDao.findUniqueByProperty("login_name", loginName);
		UserUtils.clearCache(user);
		Boolean result = SystemService.validatePassword(oldPassword, user.getPassword());
		if(!result){						
			return "validateFailure";
		}
		user.setPassword(SystemService.entryptPassword(password));
		user.setUpdateDate(new Date());
		//获取保存明文密码
		int num = -1;		
		num = userDao.updatePasswordById(user);
		if(num!=-1){
			return "OK";
		}else{
			return "error";
		}		
	}	
	/**
	 * 登录失败，真正登录的POST请求由Filter完成
	 */
	@RequestMapping(value = "${adminPath}/login", method = RequestMethod.POST)
	public String loginFail(HttpServletRequest request, HttpServletResponse response, Model model,WasSysUser wasSysUser) {			
			Principal principal = UserUtils.getPrincipal();
			
			// 如果已经登录，则跳转到管理首页
			if(principal != null){
				return "redirect:" + adminPath;
			}
			String username = WebUtils.getCleanParam(request, FormAuthenticationFilter.DEFAULT_USERNAME_PARAM);
			boolean rememberMe = WebUtils.isTrue(request, FormAuthenticationFilter.DEFAULT_REMEMBER_ME_PARAM);
			boolean mobile = WebUtils.isTrue(request, FormAuthenticationFilter.DEFAULT_MOBILE_PARAM);
			String exception = (String)request.getAttribute(FormAuthenticationFilter.DEFAULT_ERROR_KEY_ATTRIBUTE_NAME);
			String message = (String)request.getAttribute(FormAuthenticationFilter.DEFAULT_MESSAGE_PARAM);
			boolean idMessage = StringUtils.isBlank(message) || StringUtils.equals(message, "null");
			if (idMessage){
				message = "用或密码错误, 请重试.";
			}
			System.err.println("sfdhskhf"+username);
			model.addAttribute(FormAuthenticationFilter.DEFAULT_USERNAME_PARAM, username);
			model.addAttribute(FormAuthenticationFilter.DEFAULT_REMEMBER_ME_PARAM, rememberMe);
			model.addAttribute(FormAuthenticationFilter.DEFAULT_MOBILE_PARAM, mobile);
			model.addAttribute(FormAuthenticationFilter.DEFAULT_ERROR_KEY_ATTRIBUTE_NAME, exception);
			model.addAttribute(FormAuthenticationFilter.DEFAULT_MESSAGE_PARAM, message);
			
			if (logger.isDebugEnabled()){
				logger.debug("login fail, active session size: {}, message: {}, exception: {}", 
						sessionDAO.getActiveSessions(false).size(), message, exception);
			}
			
			// 非授权异常，登录失败，验证码加1。
			if (!UnauthorizedException.class.getName().equals(exception)){
				model.addAttribute("isValidateCodeLogin", isValidateCodeLogin(username, true, false));
			}
			
			// 验证失败清空验证码
			request.getSession().setAttribute(ValidateCodeServlet.VALIDATE_CODE, IdGen.uuid());
			
			// 如果是手机登录，则返回JSON字符串
			if (mobile){
				AjaxJson j = new AjaxJson();
				j.setSuccess(false);
				j.setMsg(message);
				j.put("username", username);
				j.put("name","");
				j.put("mobileLogin", mobile);
				j.put("JSESSIONID", "");
		        return renderString(response, j.getJsonStr());
			}		
		return "modules/sys/sysLoginS";
	}

	/**
	 * 退出系统
	 * @throws IOException 
	 */
	@RequestMapping(value = "${adminPath}/logout", method = RequestMethod.GET)
	public String logout(HttpServletRequest request, HttpServletResponse response, Model model) throws IOException {
		Principal principal = UserUtils.getPrincipal();
		
		// 如果已经登录，则跳转到管理首页
		if(principal != null){
			UserUtils.getSubject().logout();
			
		}
	   // 如果是手机客户端退出跳转到login，则返回JSON字符串
			String ajax = request.getParameter("__ajax");
			if(	ajax!=null){
				model.addAttribute("success", "1");
				model.addAttribute("msg", "退出成功");
				return renderString(response, model);
			}
		 return "redirect:" + adminPath+"/login";
	}
	/**
	 * 登录跳转到查询页面
	 */
	@RequestMapping(value ="${adminPath}/checkJump")
	public String checkJump(HttpServletRequest request,HttpServletResponse response){
		return "modules/agentsystem/agency/wasAgentLookUp";
	}

	/**
	 * 登录成功，进入管理首页
	 */
	
	@RequiresPermissions("user")
	@RequestMapping(value = "${adminPath}")
	public String index(HttpServletRequest request, HttpServletResponse response,WasSysUser wasSysUser,Model model) {
		Principal principal = UserUtils.getPrincipal();		
		String login_name = principal.getLoginName().toString();
		wasSysUser.setLogin_name(login_name);
		List<WasSysUser> list = wasSysUserService.agentLookUp(wasSysUser);		
		SimpleDateFormat FORMAT = new SimpleDateFormat("yy/MM/dd HH:mm");
		Date dateO = new Date();		
		Date startDateO = list.get(0).getStartDate();		
		Date endDateO = list.get(0).getEndDate();
		if((startDateO!=null) && (endDateO!=null)){			
			String date = FORMAT.format(dateO);
			String startDate = FORMAT.format(startDateO);
			String endDate = FORMAT.format(endDateO);
			int resultS = date.compareTo(startDate);
			int resultE = endDate.compareTo(date);
			Integer state = list.get(0).getState();
			if((resultS < 0)||(resultE < 0)){			
				model.addAttribute("resultFlag","账号已过期");
				Subject subject = SecurityUtils.getSubject();
				subject.logout();
				return "modules/sys/sysLoginS";
			}
			if((state == 0)){
				model.addAttribute("resultFlag","账号已经冻结");
				Subject subject = SecurityUtils.getSubject();
				subject.logout();
				return "modules/sys/sysLoginS";
			}
			boolean stateApply = (state == 2);
			if(stateApply){
				model.addAttribute("resultFlag","账号在申请中");
				Subject subject = SecurityUtils.getSubject();
				subject.logout();
				return "modules/sys/sysLoginS";
			}
			boolean stateReject = (state == 3);
			if(stateReject){
				model.addAttribute("resultFlag","账号已经驳回");
				Subject subject = SecurityUtils.getSubject();
				subject.logout();
				return "modules/sys/sysLoginS";
			}
		}
		// 登录成功后，验证码计算器清零
		isValidateCodeLogin(principal.getLoginName(), false, true);
		
		if (logger.isDebugEnabled()){
			logger.debug("show index, active session size: {}", sessionDAO.getActiveSessions(false).size());
		}
		
		// 如果已登录，再次访问主页，则退出原账号。
		boolean isGlobal = Global.TRUE.equals(Global.getConfig("notAllowRefreshIndex"));
		if (isGlobal){
			String logined = CookieUtils.getCookie(request, "LOGINED");
			boolean isLogin = StringUtils.isBlank(logined) || "false".equals(logined);
			boolean isLogined = StringUtils.equals(logined, "true");
			if (isLogin){
				CookieUtils.setCookie(response, "LOGINED", "true");
			}else if (isLogined){
				UserUtils.getSubject().logout();
				return "redirect:" + adminPath + "/login";
			}
		}
		
		// 如果是手机登录，则返回JSON字符串
		if (principal.isMobileLogin()){
			boolean loginSuccess = (request.getParameter("login") != null);
			boolean indexSuccess = (request.getParameter("index") != null);
			if (loginSuccess){
				return renderString(response, principal);
			}
			if (indexSuccess){
				return "modules/agentSystem/index";
			}
			return "redirect:" + adminPath + "/login";
		}
		//相关session存放
		String fileUrl = ConfigurationFileHelper.getFileUrl();
		String savePath = ConfigurationFileHelper.getSavePath();
		//获取登录名
		String loginName = principal.getLoginName();
		//获取头像
		String photo = "";
		if (list.get(0).getPhoto() != null && !"".equals(list.get(0).getPhoto().trim())) {
			photo = fileUrl + list.get(0).getPhoto();
		}
		// 获取shiro中的session
		Subject subject = SecurityUtils.getSubject();
		Session session = subject.getSession();
		session.setAttribute("vicmobAgentSystemUserName", principal.getLoginName());
		session.setAttribute("vicmobAgentSystemUserPhoto", photo);
		session.setAttribute("vicmobAgentSystemFileUrl", fileUrl);
		session.setAttribute("vicmobAgentSystemSavePath", savePath);
		session.setAttribute("vicmobAgentSystemLoginName", loginName);
		
		return "modules/agentsystem/index";
	}
	
	/**
	 * 获取主题方案
	 */
	@RequestMapping(value = "/theme/{theme}")
	public String getThemeInCookie(@PathVariable String theme, HttpServletRequest request, HttpServletResponse response){
		if (StringUtils.isNotBlank(theme)){
			CookieUtils.setCookie(response, "theme", theme);
		}else{
			theme = CookieUtils.getCookie(request, "theme");
		}
		return "redirect:"+request.getParameter("url");
	}
	
	/**
	 * 是否是验证码登录
	 * @param useruame 用户名
	 * @param isFail 计数加1
	 * @param clean 计数清零
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static boolean isValidateCodeLogin(String useruame, boolean isFail, boolean clean){
		Map<String, Integer> loginFailMap = (Map<String, Integer>)CacheUtils.get("loginFailMap");
		if (loginFailMap==null){
			loginFailMap = Maps.newHashMap();
			CacheUtils.put("loginFailMap", loginFailMap);
		}
		Integer loginFailNum = loginFailMap.get(useruame);
		if (loginFailNum==null){
			loginFailNum = 0;
		}
		if (isFail){
			loginFailNum++;
			loginFailMap.put(useruame, loginFailNum);
		}
		if (clean){
			loginFailMap.remove(useruame);
		}
		return loginFailNum >= 3;
	}
	
	
	/**
	 * 首页
	 * @throws IOException 
	 */
	@RequestMapping(value = "${adminPath}/home")
	public String home(HttpServletRequest request, HttpServletResponse response, Model model) throws IOException {
		
		return "modules/sys/sysHome";
		
	}
}
